{"version":3,"sources":["../src/utils/errors.ts","../src/client/FHEVMClient.ts","../src/client/createConfig.ts","../src/encryption/index.ts","../src/decryption/index.ts"],"names":[],"mappings":"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","file":"index.mjs","sourcesContent":["/**\n * Base error class for FHEVM SDK\n */\nexport class FHEVMError extends Error {\n  code: string\n\n  constructor(message: string, code: string) {\n    super(message)\n    this.code = code\n    this.name = 'FHEVMError'\n    Object.setPrototypeOf(this, FHEVMError.prototype)\n  }\n}\n\n/**\n * Thrown when FHEVM instance is not ready\n */\nexport class InstanceNotReadyError extends FHEVMError {\n  constructor() {\n    super('FHEVM instance is not initialized. Call init() first.', 'INSTANCE_NOT_READY')\n    this.name = 'InstanceNotReadyError'\n  }\n}\n\n/**\n * Thrown when encryption fails\n */\nexport class EncryptionError extends FHEVMError {\n  constructor(message: string) {\n    super(`Encryption failed: ${message}`, 'ENCRYPTION_ERROR')\n    this.name = 'EncryptionError'\n  }\n}\n\n/**\n * Thrown when decryption fails\n */\nexport class DecryptionError extends FHEVMError {\n  constructor(message: string) {\n    super(`Decryption failed: ${message}`, 'DECRYPTION_ERROR')\n    this.name = 'DecryptionError'\n  }\n}\n\n/**\n * Thrown when configuration is invalid\n */\nexport class ConfigError extends FHEVMError {\n  constructor(message: string) {\n    super(`Invalid configuration: ${message}`, 'CONFIG_ERROR')\n    this.name = 'ConfigError'\n  }\n}\n","import type { FHEVMConfig } from '../types'\nimport { InstanceNotReadyError } from '../utils/errors'\n\n// Type for FHEVM instance from fhevmjs\nexport interface FHEVMInstance {\n  createEncryptedInput(contractAddress: string, userAddress: string): EncryptedInputBuilder\n  getPublicKey(): string | null\n  reencrypt(\n    handle: bigint,\n    privateKey: string,\n    publicKey: string,\n    signature: string,\n    contractAddress: string,\n    userAddress: string\n  ): Promise<bigint>\n  createEIP712(publicKey: string, contractAddress: string, userAddress?: string): EIP712\n  generateKeypair(): { publicKey: string; privateKey: string }\n}\n\nexport interface EncryptedInputBuilder {\n  add8(value: number): EncryptedInputBuilder\n  add16(value: number): EncryptedInputBuilder\n  add32(value: number): EncryptedInputBuilder\n  add64(value: bigint): EncryptedInputBuilder\n  add128(value: bigint): EncryptedInputBuilder\n  add256(value: bigint): EncryptedInputBuilder\n  addBool(value: boolean): EncryptedInputBuilder\n  encrypt(): { handles: Uint8Array[]; inputProof: Uint8Array }\n  getValues(): Uint8Array[]\n}\n\nexport interface EIP712 {\n  domain: {\n    name: string\n    version: string\n    chainId: number\n    verifyingContract: string\n  }\n  types: Record<string, any>\n  message: Record<string, any>\n  primaryType: string\n}\n\n/**\n * FHEVM Client for managing instance lifecycle\n */\nexport class FHEVMClient {\n  private instance: FHEVMInstance | null = null\n  private config: FHEVMConfig\n  private isInitialized: boolean = false\n  private static instanceCache = new Map<string, FHEVMInstance>()\n\n  constructor(config: FHEVMConfig) {\n    this.config = config\n  }\n\n  /**\n   * Initialize the FHEVM instance\n   */\n  async init(): Promise<void> {\n    if (this.isInitialized && this.instance) {\n      return\n    }\n\n    const cacheKey = this.getCacheKey()\n\n    // Check cache if enabled\n    if (this.config.cacheEnabled && FHEVMClient.instanceCache.has(cacheKey)) {\n      this.instance = FHEVMClient.instanceCache.get(cacheKey)!\n      this.isInitialized = true\n      return\n    }\n\n    // Create new instance\n    try {\n      // Dynamic import to support both Node.js and browser\n      const { createInstance, initFhevm } = await import('fhevmjs')\n\n      // In browser, we need to init WASM first\n      if (typeof window !== 'undefined') {\n        await initFhevm()\n      }\n\n      const instance = await createInstance({\n        chainId: this.config.chainId,\n        networkUrl: this.config.networkUrl,\n        gatewayUrl: this.config.gatewayUrl,\n        aclAddress: this.config.aclAddress,\n      })\n\n      this.instance = instance as unknown as FHEVMInstance\n      this.isInitialized = true\n\n      // Cache instance if enabled\n      if (this.config.cacheEnabled) {\n        FHEVMClient.instanceCache.set(cacheKey, this.instance)\n      }\n    } catch (error) {\n      throw new Error(\n        `Failed to initialize FHEVM instance: ${error instanceof Error ? error.message : String(error)}`\n      )\n    }\n  }\n\n  /**\n   * Get the FHEVM instance\n   */\n  getInstance(): FHEVMInstance {\n    if (!this.instance || !this.isInitialized) {\n      throw new InstanceNotReadyError()\n    }\n    return this.instance\n  }\n\n  /**\n   * Check if instance is ready\n   */\n  isReady(): boolean {\n    return this.isInitialized && this.instance !== null\n  }\n\n  /**\n   * Get config\n   */\n  getConfig(): FHEVMConfig {\n    return this.config\n  }\n\n  /**\n   * Generate cache key for instance caching\n   */\n  private getCacheKey(): string {\n    return `${this.config.chainId}-${this.config.networkUrl}-${this.config.gatewayUrl}`\n  }\n\n  /**\n   * Clear the instance cache\n   */\n  static clearCache(): void {\n    FHEVMClient.instanceCache.clear()\n  }\n}\n","import type { FHEVMConfig } from '../types'\nimport { ConfigError } from '../utils/errors'\n\n/**\n * Create and validate FHEVM configuration\n */\nexport function createConfig(config: FHEVMConfig): FHEVMConfig {\n  // Validate required fields\n  if (!config.chainId) {\n    throw new ConfigError('chainId is required')\n  }\n\n  if (!config.networkUrl) {\n    throw new ConfigError('networkUrl is required')\n  }\n\n  if (!config.gatewayUrl) {\n    throw new ConfigError('gatewayUrl is required')\n  }\n\n  if (!config.aclAddress) {\n    throw new ConfigError('aclAddress is required')\n  }\n\n  // Validate chain ID\n  if (typeof config.chainId !== 'number' || config.chainId <= 0) {\n    throw new ConfigError('chainId must be a positive number')\n  }\n\n  // Validate URLs\n  try {\n    new URL(config.networkUrl)\n  } catch {\n    throw new ConfigError('networkUrl must be a valid URL')\n  }\n\n  try {\n    new URL(config.gatewayUrl)\n  } catch {\n    throw new ConfigError('gatewayUrl must be a valid URL')\n  }\n\n  // Validate ACL address (basic Ethereum address validation)\n  if (!/^0x[a-fA-F0-9]{40}$/.test(config.aclAddress)) {\n    throw new ConfigError('aclAddress must be a valid Ethereum address')\n  }\n\n  // Return config with defaults\n  return {\n    ...config,\n    cacheEnabled: config.cacheEnabled ?? true,\n    autoInit: config.autoInit ?? true,\n  }\n}\n","import type { EncryptParams, EncryptBatchParams, EncryptedData, EncryptType } from '../types'\nimport type { FHEVMInstance, EncryptedInputBuilder } from '../client/FHEVMClient'\nimport { EncryptionError } from '../utils/errors'\n\n/**\n * Convert encrypted input result to our EncryptedData format\n */\nfunction convertToEncryptedData(result: {\n  handles: Uint8Array[]\n  inputProof: Uint8Array\n}): EncryptedData {\n  return {\n    handles: result.handles.map((h) => '0x' + Buffer.from(h).toString('hex')),\n    inputProof: result.inputProof,\n  }\n}\n\n/**\n * Add value to encrypted input based on type\n */\nfunction addValueToInput(\n  input: EncryptedInputBuilder,\n  value: number | bigint | boolean,\n  type: EncryptType\n): void {\n  switch (type) {\n    case 'bool':\n      if (typeof value !== 'boolean') {\n        throw new EncryptionError(`Value must be boolean for type 'bool'`)\n      }\n      input.addBool(value)\n      break\n    case 'uint8':\n      if (typeof value !== 'number') {\n        throw new EncryptionError(`Value must be number for type 'uint8'`)\n      }\n      input.add8(value)\n      break\n    case 'uint16':\n      if (typeof value !== 'number') {\n        throw new EncryptionError(`Value must be number for type 'uint16'`)\n      }\n      input.add16(value)\n      break\n    case 'uint32':\n      if (typeof value !== 'number') {\n        throw new EncryptionError(`Value must be number for type 'uint32'`)\n      }\n      input.add32(value)\n      break\n    case 'uint64':\n      input.add64(BigInt(value))\n      break\n    case 'uint128':\n      input.add128(BigInt(value))\n      break\n    case 'uint256':\n      input.add256(BigInt(value))\n      break\n    default:\n      throw new EncryptionError(`Unsupported encryption type: ${type}`)\n  }\n}\n\n/**\n * Encrypt a single value\n */\nexport async function encrypt(\n  instance: FHEVMInstance,\n  params: EncryptParams,\n  userAddress: string\n): Promise<EncryptedData> {\n  try {\n    const input = instance.createEncryptedInput(params.contractAddress, userAddress)\n    addValueToInput(input, params.value, params.type)\n    const result = input.encrypt()\n    return convertToEncryptedData(result)\n  } catch (error) {\n    throw new EncryptionError(\n      `Failed to encrypt value: ${error instanceof Error ? error.message : String(error)}`\n    )\n  }\n}\n\n/**\n * Encrypt multiple values in batch\n */\nexport async function encryptBatch(\n  instance: FHEVMInstance,\n  params: EncryptBatchParams,\n  userAddress: string\n): Promise<EncryptedData> {\n  try {\n    const input = instance.createEncryptedInput(params.contractAddress, userAddress)\n\n    for (const item of params.values) {\n      addValueToInput(input, item.value, item.type)\n    }\n\n    const result = input.encrypt()\n    return convertToEncryptedData(result)\n  } catch (error) {\n    throw new EncryptionError(\n      `Failed to batch encrypt: ${error instanceof Error ? error.message : String(error)}`\n    )\n  }\n}\n\n/**\n * Create an encrypted input builder\n */\nexport function createEncryptedInput(\n  instance: FHEVMInstance,\n  contractAddress: string,\n  userAddress: string\n): EncryptedInputBuilder {\n  return instance.createEncryptedInput(contractAddress, userAddress)\n}\n","import type { DecryptParams, TokenParams } from '../types'\nimport type { FHEVMInstance, EIP712 } from '../client/FHEVMClient'\nimport { DecryptionError } from '../utils/errors'\n\n/**\n * Generate EIP712 for token signing\n */\nexport async function generateToken(\n  instance: FHEVMInstance,\n  params: TokenParams & { userAddress?: string }\n): Promise<EIP712> {\n  try {\n    const publicKey = instance.getPublicKey()\n    if (!publicKey) {\n      throw new DecryptionError('Public key not available')\n    }\n\n    const eip712 = instance.createEIP712(\n      publicKey,\n      params.verifyingContract,\n      params.userAddress\n    )\n    return eip712\n  } catch (error) {\n    throw new DecryptionError(\n      `Failed to generate token: ${error instanceof Error ? error.message : String(error)}`\n    )\n  }\n}\n\n/**\n * Decrypt a value (requires reencryption flow)\n */\nexport async function decrypt(\n  instance: FHEVMInstance,\n  params: DecryptParams,\n  userAddress: string,\n  privateKey: string,\n  signature: string\n): Promise<bigint> {\n  try {\n    // Get public key\n    const publicKey = instance.getPublicKey()\n    if (!publicKey) {\n      throw new DecryptionError('Public key not available')\n    }\n\n    // Reencrypt the handle\n    const decrypted = await instance.reencrypt(\n      BigInt(params.handle),\n      privateKey,\n      publicKey,\n      signature,\n      params.contractAddress,\n      userAddress\n    )\n\n    return decrypted\n  } catch (error) {\n    throw new DecryptionError(\n      `Failed to decrypt: ${error instanceof Error ? error.message : String(error)}`\n    )\n  }\n}\n\n/**\n * Reencrypt a handle for viewing\n */\nexport async function reencrypt(\n  instance: FHEVMInstance,\n  handle: string,\n  contractAddress: string,\n  userAddress: string,\n  privateKey: string,\n  signature: string\n): Promise<bigint> {\n  try {\n    const publicKey = instance.getPublicKey()\n    if (!publicKey) {\n      throw new DecryptionError('Public key not available')\n    }\n\n    const result = await instance.reencrypt(\n      BigInt(handle),\n      privateKey,\n      publicKey,\n      signature,\n      contractAddress,\n      userAddress\n    )\n\n    return result\n  } catch (error) {\n    throw new DecryptionError(\n      `Failed to reencrypt: ${error instanceof Error ? error.message : String(error)}`\n    )\n  }\n}\n"]}