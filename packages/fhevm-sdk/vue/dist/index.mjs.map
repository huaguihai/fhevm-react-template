{"version":3,"sources":["../src/plugin/FHEVMPlugin.ts","../src/composables/useFHEVM.ts","../src/composables/useEncrypt.ts","../src/composables/useDecrypt.ts"],"names":["encrypt","coreEncrypt","ref","decrypt","coreDecrypt"],"mappings":"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","file":"index.mjs","sourcesContent":["import type { App, Plugin, InjectionKey } from 'vue'\nimport { FHEVMClient, type FHEVMConfig, type FHEVMInstance } from '@universal-fhevm/core'\nimport { reactive } from 'vue'\n\nexport interface FHEVMPluginState {\n  client: any | null\n  instance: FHEVMInstance | null\n  isReady: boolean\n  error: Error | null\n}\n\nexport const FHEVM_INJECTION_KEY: InjectionKey<FHEVMPluginState> = Symbol('fhevm')\n\nexport interface FHEVMPluginOptions {\n  config: FHEVMConfig\n}\n\nexport const FHEVMPlugin: Plugin = {\n  install(app: App, options: FHEVMPluginOptions) {\n    const state = reactive<FHEVMPluginState>({\n      client: null,\n      instance: null,\n      isReady: false,\n      error: null,\n    })\n\n    // Initialize FHEVM client\n    const initializeClient = async () => {\n      try {\n        const client = new FHEVMClient(options.config)\n\n        if (options.config.autoInit !== false) {\n          await client.init()\n        }\n\n        state.client = client\n\n        if (client.isReady()) {\n          state.instance = client.getInstance()\n          state.isReady = true\n        }\n      } catch (err) {\n        state.error = err instanceof Error ? err : new Error(String(err))\n        state.isReady = false\n      }\n    }\n\n    initializeClient()\n\n    // Provide state to the app\n    app.provide(FHEVM_INJECTION_KEY, state)\n  },\n}\n","import { inject } from 'vue'\nimport { FHEVM_INJECTION_KEY, type FHEVMPluginState } from '../plugin/FHEVMPlugin'\n\n/**\n * Composable to access FHEVM instance and client\n */\nexport function useFHEVM(): FHEVMPluginState {\n  const state = inject(FHEVM_INJECTION_KEY)\n\n  if (!state) {\n    throw new Error('useFHEVM must be used after installing FHEVMPlugin')\n  }\n\n  return state\n}\n","import { ref } from 'vue'\nimport { encrypt as coreEncrypt, type EncryptParams, type EncryptedData } from '@universal-fhevm/core'\nimport { useFHEVM } from './useFHEVM'\n\nexport interface UseEncryptOptions {\n  userAddress?: string\n  onSuccess?: (data: EncryptedData) => void\n  onError?: (error: Error) => void\n}\n\n/**\n * Composable for encrypting values\n */\nexport function useEncrypt(options?: UseEncryptOptions) {\n  const { instance, isReady } = useFHEVM()\n  const isPending = ref(false)\n  const isSuccess = ref(false)\n  const isError = ref(false)\n  const error = ref<Error | null>(null)\n  const data = ref<EncryptedData | null>(null)\n\n  const encrypt = async (params: EncryptParams): Promise<EncryptedData> => {\n    if (!instance || !isReady) {\n      throw new Error('FHEVM instance is not ready')\n    }\n\n    if (!options?.userAddress) {\n      throw new Error('userAddress is required for encryption')\n    }\n\n    isPending.value = true\n    isError.value = false\n    error.value = null\n\n    try {\n      const result = await coreEncrypt(instance, params, options.userAddress)\n      data.value = result\n      isSuccess.value = true\n      options?.onSuccess?.(result)\n      return result\n    } catch (err) {\n      const errorObj = err instanceof Error ? err : new Error(String(err))\n      error.value = errorObj\n      isError.value = true\n      options?.onError?.(errorObj)\n      throw errorObj\n    } finally {\n      isPending.value = false\n    }\n  }\n\n  const reset = () => {\n    isPending.value = false\n    isSuccess.value = false\n    isError.value = false\n    error.value = null\n    data.value = null\n  }\n\n  return {\n    encrypt,\n    isPending,\n    isSuccess,\n    isError,\n    error,\n    data,\n    reset,\n  }\n}\n","import { ref } from 'vue'\nimport { decrypt as coreDecrypt, type DecryptParams } from '@universal-fhevm/core'\nimport { useFHEVM } from './useFHEVM'\n\nexport interface UseDecryptOptions {\n  onSuccess?: (data: bigint) => void\n  onError?: (error: Error) => void\n}\n\nexport interface DecryptParamsWithAuth extends DecryptParams {\n  userAddress: string\n  privateKey: string\n  signature: string\n}\n\n/**\n * Composable for decrypting values\n */\nexport function useDecrypt(options?: UseDecryptOptions) {\n  const { instance, isReady } = useFHEVM()\n  const isPending = ref(false)\n  const isSuccess = ref(false)\n  const isError = ref(false)\n  const error = ref<Error | null>(null)\n  const data = ref<bigint | null>(null)\n\n  const decrypt = async (params: DecryptParamsWithAuth): Promise<bigint> => {\n    if (!instance || !isReady) {\n      throw new Error('FHEVM instance is not ready')\n    }\n\n    isPending.value = true\n    isError.value = false\n    error.value = null\n\n    try {\n      const { userAddress, privateKey, signature, ...decryptParams } = params\n      const result = await coreDecrypt(instance, decryptParams, userAddress, privateKey, signature)\n      data.value = result\n      isSuccess.value = true\n      options?.onSuccess?.(result)\n      return result\n    } catch (err) {\n      const errorObj = err instanceof Error ? err : new Error(String(err))\n      error.value = errorObj\n      isError.value = true\n      options?.onError?.(errorObj)\n      throw errorObj\n    } finally {\n      isPending.value = false\n    }\n  }\n\n  const reset = () => {\n    isPending.value = false\n    isSuccess.value = false\n    isError.value = false\n    error.value = null\n    data.value = null\n  }\n\n  return {\n    decrypt,\n    isPending,\n    isSuccess,\n    isError,\n    error,\n    data,\n    reset,\n  }\n}\n"]}